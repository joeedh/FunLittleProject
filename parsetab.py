
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = 'E66E42FB1C82FB94F60463F67E060F2F'
    
_lr_action_items = {'CHARLIT':([2,3,10,11,13,14,17,27,28,],[-7,-4,-2,-1,18,-3,-4,18,-3,]),'ID':([0,1,2,3,5,7,8,10,11,13,14,15,16,17,27,28,],[2,2,-7,-4,-26,-25,-27,-2,-1,19,-3,-23,-24,-4,19,-3,]),'$end':([0,1,5,7,8,15,16,],[-28,0,-26,-25,-27,-23,-24,]),'COLON':([2,],[9,]),'NUM':([2,3,10,11,13,14,17,27,28,],[-7,-4,-2,-1,21,-3,-4,21,-3,]),'COMMA':([2,3,10,11,12,13,14,18,19,20,21,22,23,24,25,26,28,29,],[-7,-4,-2,-1,17,-16,-3,-12,-7,-9,-10,-13,-15,-14,-8,-11,-18,-17,]),'INT32':([2,3,10,11,13,14,17,27,28,],[-7,11,-2,-1,22,-3,11,22,-3,]),'STRLIT':([2,3,10,11,13,14,17,27,28,],[-7,-4,-2,-1,25,-3,-4,25,-3,]),'FLOAT64':([2,3,10,11,13,14,17,27,28,],[-7,10,-2,-1,24,-3,10,24,-3,]),'NL':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,18,19,20,21,22,23,24,25,26,28,29,],[7,7,-7,-4,15,-26,16,-25,-27,-22,-2,-1,-21,-16,-3,-23,-24,-12,-7,-9,-10,-13,-15,-14,-8,-11,-18,-17,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statementlist':([0,],[1,]),'strlit':([13,27,],[26,26,]),'id':([0,1,13,27,],[3,3,20,20,]),'label':([0,1,],[4,4,]),'arglist':([3,],[12,]),'statement':([0,1,],[5,8,]),'typeword_opt':([3,17,],[13,27,]),'arg':([13,27,],[23,29,]),'typeword':([3,17,],[14,28,]),'inst':([0,1,],[6,6,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statementlist","S'",1,None,None,None),
  ('typeword -> INT32','typeword',1,'p_typeword','asm_parse.py',83),
  ('typeword -> FLOAT64','typeword',1,'p_typeword','asm_parse.py',84),
  ('typeword_opt -> typeword','typeword_opt',1,'p_typeword_opt','asm_parse.py',90),
  ('typeword_opt -> <empty>','typeword_opt',0,'p_typeword_opt','asm_parse.py',91),
  ('id_opt -> ID','id_opt',1,'p_id_opt','asm_parse.py',99),
  ('id_opt -> <empty>','id_opt',0,'p_id_opt','asm_parse.py',100),
  ('id -> ID','id',1,'p_id','asm_parse.py',112),
  ('strlit -> STRLIT','strlit',1,'p_strlit','asm_parse.py',120),
  ('arg -> id','arg',1,'p_arg','asm_parse.py',126),
  ('arg -> NUM','arg',1,'p_arg','asm_parse.py',127),
  ('arg -> strlit','arg',1,'p_arg','asm_parse.py',128),
  ('arg -> CHARLIT','arg',1,'p_arg','asm_parse.py',129),
  ('arg -> INT32','arg',1,'p_arg','asm_parse.py',130),
  ('arg -> FLOAT64','arg',1,'p_arg','asm_parse.py',131),
  ('arglist -> typeword_opt arg','arglist',2,'p_arglist','asm_parse.py',140),
  ('arglist -> typeword_opt','arglist',1,'p_arglist','asm_parse.py',141),
  ('arglist -> arglist COMMA typeword_opt arg','arglist',4,'p_arglist','asm_parse.py',142),
  ('arglist -> arglist COMMA typeword','arglist',3,'p_arglist','asm_parse.py',143),
  ('arglist -> <empty>','arglist',0,'p_arglist','asm_parse.py',144),
  ('inst -> id','inst',1,'p_inst','asm_parse.py',172),
  ('inst -> id arglist','inst',2,'p_inst','asm_parse.py',173),
  ('label -> ID COLON','label',2,'p_label','asm_parse.py',184),
  ('statement -> label NL','statement',2,'p_statement','asm_parse.py',193),
  ('statement -> inst NL','statement',2,'p_statement','asm_parse.py',194),
  ('statement -> NL','statement',1,'p_statement','asm_parse.py',195),
  ('statementlist -> statement','statementlist',1,'p_statementlist','asm_parse.py',207),
  ('statementlist -> statementlist statement','statementlist',2,'p_statementlist','asm_parse.py',208),
  ('statementlist -> <empty>','statementlist',0,'p_statementlist','asm_parse.py',209),
]
